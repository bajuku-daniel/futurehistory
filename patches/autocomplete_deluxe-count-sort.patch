diff --git a/autocomplete_deluxe.module b/autocomplete_deluxe.module
index d6aa529..ecd2f01 100755
--- a/autocomplete_deluxe.module
+++ b/autocomplete_deluxe.module
@@ -35,7 +35,8 @@
   $tags_typed = drupal_explode_tags($tags_typed);
   $tag_last = drupal_strtolower(array_pop($tags_typed));
 
-  $matches = array();
+  // Initiate tag collections.
+  $tags_return = $beginning_tags = $middle_tags = array();
 
   // Part of the criteria for the query come from the field's own settings.
   $vids = array();
@@ -66,23 +67,61 @@
       ->fields('t', array('tid', 'name'))
       ->condition('t.vid', $vids);
 
+    // Clone query, because we need the current state for the "middle" query.
+    $middle_query = clone $query;
+
+    // Apply general limit.
+    if (isset($limit) && $limit > 0) {
+      $query->range(0, $limit);
+    }
+
+    // Check for terms beginning with the given term first.
     if (module_exists('synonyms') && !empty($use_synonyms)) {
       $or = db_or();
-      $or->condition('fdss.synonyms_synonym_value', '%' . db_like($tag_last) . '%', 'LIKE');
-      $or->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE');
+      $or->condition('fdss.synonyms_synonym_value', db_like($tag_last) . '%', 'LIKE');
+      $or->condition('t.name', db_like($tag_last) . '%', 'LIKE');
       $query->condition($or);
     }
     else {
-      $query->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE');
+      $query->condition('t.name', db_like($tag_last) . '%', 'LIKE');
     }
 
-    if (isset($limit) && $limit > 0) {
-      $query->range(0, $limit);
+    $beginning_tags = $query->execute()
+      ->fetchAllKeyed();
+
+    // Check for terms having the term somewhere in it second.
+    // Apply new limit, which is the general one minus the results of the
+    // beginning query.
+    $middle_limit = $limit - count($beginning_tags);
+
+    // Only proceed, if we really need more results.
+    if ($middle_limit > 0) {
+      // Apply limit.
+      $middle_query->range(0, $middle_limit);
+
+      // Make sure we are not getting the same results as for the query above.
+      if (!empty($beginning_tags)) {
+        $beginning_term_ids = array_keys($beginning_tags);
+        $middle_query->condition('t.tid', $beginning_term_ids, 'NOT IN');
-    }
+      }
 
-    $tags_return = $query->execute()
+      if (module_exists('synonyms') && !empty($use_synonyms)) {
+        $or = db_or();
+        $or->condition('fdss.synonyms_synonym_value', '%' . db_like($tag_last) . '%', 'LIKE');
+        $or->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE');
+        $middle_query->condition($or);
+      }
+      else {
+        $middle_query->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE');
+      }
+
+      $middle_tags = $middle_query->execute()
-      ->fetchAllKeyed();
-  }
+        ->fetchAllKeyed();
+    }
+
+    // Build tags.
+    $tags_return = $beginning_tags + $middle_tags;
+  }
   else {
     $query
       ->fields('t', array('tid', 'name'))
@@ -96,18 +135,45 @@
       ->fetchAllKeyed();
   }
 
-  $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) . ', ' : '';
+  $do_count = function_exists(futurehistory_count_nodes_with_tid);
 
+  $worker = function ($tags_return) use (&$tags_typed, $do_count) {
+    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) . ', ' : '';
+    if ($do_count) {
+      $count_data = futurehistory_count_nodes_with_tid();
+    }
-  $term_matches = array();
-  foreach ($tags_return as $tid => $name) {
-    $n = $name;
-    // Term names containing commas or quotes must be wrapped in quotes.
-    if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
-      $n = '"' . str_replace('"', '""', $name) . '"';
-    }
+    $term_matches = array();
+    foreach ($tags_return as $tid => $name) {
+      $n = $name;
+      // Term names containing commas or quotes must be wrapped in quotes.
+      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
+        $n = '"' . str_replace('"', '""', $name) . '"';
+      }
-    $term_matches[$prefix . $n] = check_plain($name);
+      if (!$do_count) {
+//        $term_matches[$prefix . $n] = check_plain($name);
+        $term_matches[check_plain($name)] = check_plain($name);
-  }
+      }
+      else {
+//        $term_matches[$prefix . $n] = check_plain($name) . ' (' . $count_data[$tid] . ')';
+        $term_matches[check_plain($name)] = check_plain($name) . ' (' . $count_data[$tid] . ')';
+      }
+    }
+    if ($do_count) {
+      uasort($term_matches, function ($a, $b) {
+        $b_count = (substr($b, (strpos($b, '(') + 1), (strpos($b, ')') - strpos($b, '(')) - 1));
+        $a_count = (substr($a, (strpos($a, '(') + 1), (strpos($a, ')') - strpos($a, '(')) - 1));
+        if ($b_count == $a_count) {
+          return strcmp($a, $b);
+        }
+        return $b_count - $a_count;
+      });
+    }
+    return $term_matches;
+  };
 
+  $term_matches = $worker($beginning_tags);
+  $term_matches += $worker($middle_tags);
+
   drupal_json_output($term_matches);
 }
 
@@ -339,6 +405,7 @@
   // once the form API has finished processing the element, the value is an
   // array containing the child element values. Then finally the after build
   // callback converts it back to the numeric value and sets that.
+  $R=0;
   return array();
 }
 
